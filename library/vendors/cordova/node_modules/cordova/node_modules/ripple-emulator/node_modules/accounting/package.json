{
  "name": "accounting",
  "description": "number, money and currency parsing/formatting library",
  "homepage": "http://josscrowcroft.github.com/accounting.js",
  "keywords": [
    "accounting",
    "number",
    "money",
    "currency",
    "format",
    "utilities"
  ],
  "author": {
    "name": "Joss Crowcroft",
    "email": "josscrowcroft@gmail.com",
    "url": "http://www.josscrowcroft.com"
  },
  "contributors": [],
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/josscrowcroft/accounting.js.git"
  },
  "main": "accounting.js",
  "version": "0.3.2",
  "readme": "**accounting.js** is a tiny JavaScript library for number, money and currency parsing/formatting. It's lightweight and fully localisable, with zero dependencies, and works great as a nodeJS/npm and AMD/requireJS module. \n\nCheck out the **[accounting.js homepage](http://josscrowcroft.github.com/accounting.js/)** for demos and documentation!\n\nPlease checkout/download the latest stable tag before using in production. [Bug reports](https://github.com/josscrowcroft/accounting.js/issues) and pull requests hugely welcome.\n\nMade with love by [@josscrowcroft](http://twitter.com/josscrowcroft) and some excellent [contributors](https://github.com/josscrowcroft/accounting.js/contributors).\n\n---\n\n### Also try:\n\n* **[money.js](http://josscrowcroft.github.com/money.js)** - a tiny (1kb) javascript currency conversion library, for web & nodeJS\n* **[open exchange rates](http://josscrowcroft.github.com/open-exchange-rates/)** - free / open source hourly-updated currency conversion data for everybody\n\n---\n\n## Changelog\n\n**v0.3.2** - Fix package.json dependencies (should be empty object) and tweak comments\n\n**v0.3.0**\n\n* Rewrote library structure similar to underscore.js for use as a **nodeJS/npm** and **AMD/requireJS** module - now you can go `npm install accounting`, and then `var accounting = require(\"accounting\");` in your nodeJS scripts.\n* **unformat** now only attempts to parse the number if it's not already a valid number. Also now aliased as `acounting.parse`\n* Fixed an IE bug in the `defaults` method\n\n**v0.2.2** - Fixed same issue as \\#Num: #24 in **formatNumber**; switch to Google Closure Compiler for minified version.\n\n**v0.2.1** - Fixed issue \\#Num: #24 where locally-defined settings object was being modified by **formatMoney** (still an issue in **formatNumber**)\n\n**v0.2**\n\n* Rewrote formatting system for **formatMoney** and **formatColumn**, to allow easier/better control of string output\n* Separate formats for negative and zero values now supported (optionally) via `accounting.settings.currency.format`\n* Internal improvements and helper methods\n\n**v0.1.4** - **formatMoney** recursively formats arrays; added Jasmine test suite (thx [millermedeiros](https://github.com/millermedeiros)!) and QUnit functionality/speed tests\n\n**v0.1.3**\n\n* Added configurable settings object for default formatting parameters.\n* Added `format` parameter to control symbol and value position (default `\"%s%v\"`, or [symbol][value])\n* Made methods more consistent in accepting an object as 2nd parameter, matching/overriding the library defaults\n\n**v0.1.2**\n\n* **formatColumn** works recursively on nested arrays, eg `accounting.formatColumn( [[1,12,123,1234], [1234,123,12,1]] )`, returns matching array with inner columns lined up\n* Another fix for rounding in **formatNumber**: `.535` now correctly rounds to \".54\" instead of \".53\"\n\n**v0.1.1**\n\n* Added **toFixed** method (`accounting.toFixed(value, precision)`), which treats floats more like decimals for more accurate currency rounding - now, `0.615` rounds up to `$0.62` instead of `$0.61`\n* Minified version preserves semicolons\n* Fixed NaN errors when no value in **unformat**\n\n**v0.1** - First version yo\n\n\n---\n\n### Here's a neat little preview of **formatColumn()**:\n\n```html\n Original Number:   |  With accounting.js:    |  Different settings:    |    Symbol after value:\n -------------------+-------------------------+-------------------------+-----------------------\n 123.5              |     $        123.50     |     HK$         124     |            123.50 GBP\n 3456.615           |     $      3,456.62     |     HK$       3,457     |          3,456.62 GBP\n 777888.99          |     $    777,888.99     |     HK$     777,889     |        777,888.99 GBP\n -5432              |     $     -5,432.00     |     HK$     (5,432)     |         -5,432.00 GBP\n -1234567           |     $ -1,234,567.00     |     HK$ (1,234,567)     |     -1,234,567.00 GBP\n 0                  |     $          0.00     |     HK$          --     |              0.00 GBP\n```\n\nThere's more demos and documentation on the **[accounting.js homepage](http://josscrowcroft.github.com/accounting.js/)**. Enjoy!\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/josscrowcroft/accounting.js/issues"
  },
  "_id": "accounting@0.3.2",
  "_from": "accounting@0.x.x"
}
